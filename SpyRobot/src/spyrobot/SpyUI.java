/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpyUI.java
 *
 * Created on 17-Mar-2011, 17:26:29
 */

package spyrobot;

//import com.sun.javaws.progress.Progress;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.comm.NoSuchPortException;
import javax.swing.*;
import java.io.IOException;
import java.util.Set;

import static spyrobot.RobotController.*;

/**
 *
 * @author KrisTheSavage
 */
public class SpyUI extends javax.swing.JFrame implements KeyListener, RobotListener, FocusListener{

    private int                 portNumber;
    private RobotController     serialPort;
    private ImageIcon           image = null;
   // private ImageIcon           iUp, iDown, iLeft, iRight;

    public void imageDownloadProgress(int percentage) {
        //To change body of implemented methods use File | Settings | File Templates.
        jProgressBar.setValue(percentage);
        jlProgresStatus.setText("Progress: " + percentage + "%");
    }

    public void robotMessageReceived(String message) {
        //To change body of implemented methods use File | Settings | File Templates.
        jtaDisplay.append(message + "\n");
    }

    public void displayImage(ImageIcon i){
        this.image = i;
        jlImage.setIcon(image);
    }

    /** Creates new form SpyUI */
    public SpyUI() {
        super("Robot Control        Krzysztof Grobelak D09120590  Version 1.4");
        initComponents();
        jbForward.setIcon(new ImageIcon("arrow up.png"));
        jbBack.setIcon(new ImageIcon("arrow down.png"));
        jbLeft.setIcon(new ImageIcon("arrow left.png"));
        jbRight.setIcon(new ImageIcon("arrow right.png"));
        jbStop.setIcon(new ImageIcon("stop.png"));
        jbConnect.setIcon(new ImageIcon("connect.png"));
        jbConnect.setText("Connect");
        jbTakePic.setIcon(new ImageIcon("camera.png"));
        jlImage.setIcon(new ImageIcon("ground.png"));
        this.setVisible(true);
        this.addKeyListener(this);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jbTakePic = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jsSpeed = new javax.swing.JSlider();
        jlSpeed = new javax.swing.JLabel();
        jrQCIF = new javax.swing.JRadioButton();
        jbBack = new javax.swing.JButton();
        jrCIF = new javax.swing.JRadioButton();
        jlRX = new javax.swing.JLabel();
        jbLeft = new javax.swing.JButton();
        jbStop = new javax.swing.JButton();
        jbForward = new javax.swing.JButton();
        jbRight = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaDisplay = new javax.swing.JTextArea();
        jbConnect = new javax.swing.JButton();
        jcComPort = new javax.swing.JComboBox();
        jlProgresStatus = new javax.swing.JLabel();
        jlImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusCycleRoot(false);

        jbTakePic.setFont(new java.awt.Font("Tahoma", 0, 12));
        jbTakePic.setFocusable(false);
        jbTakePic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTakePicActionPerformed(evt);
            }
        });

        jsSpeed.setMajorTickSpacing(10);
        jsSpeed.setMaximum(63);
        jsSpeed.setMinorTickSpacing(5);
        jsSpeed.setPaintLabels(true);
        jsSpeed.setPaintTicks(true);
        jsSpeed.setValue(15);
        jsSpeed.setFocusable(false);

        jlSpeed.setText("Speed");

        buttonGroup1.add(jrQCIF);
        jrQCIF.setText("QCIF");

        jbBack.setFont(new java.awt.Font("Tahoma", 0, 12));
        jbBack.setFocusable(false);
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });

        buttonGroup1.add(jrCIF);
        jrCIF.setSelected(true);
        jrCIF.setText("CIF");

        jlRX.setText("From Robot:");

        jbLeft.setFont(new java.awt.Font("Tahoma", 0, 12));
        jbLeft.setFocusable(false);
        jbLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLeftActionPerformed(evt);
            }
        });

        jbStop.setFont(new java.awt.Font("Tahoma", 0, 12));
        jbStop.setFocusable(false);
        jbStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStopActionPerformed(evt);
            }
        });

        jbForward.setFont(new java.awt.Font("Tahoma", 0, 12));
        jbForward.setFocusable(false);
        jbForward.setPreferredSize(new java.awt.Dimension(90, 25));
        jbForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbForwardActionPerformed(evt);
            }
        });

        jbRight.setFont(new java.awt.Font("Tahoma", 0, 12));
        jbRight.setFocusable(false);
        jbRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRightActionPerformed(evt);
            }
        });

        jtaDisplay.setColumns(20);
        jtaDisplay.setRows(5);
        jtaDisplay.setFocusable(false);
        jScrollPane1.setViewportView(jtaDisplay);

        jbConnect.setFocusable(false);
        jbConnect.setPreferredSize(new java.awt.Dimension(35, 10));
        jbConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConnectActionPerformed(evt);
            }
        });

        Set<String> ports = getPorts();
        jcComPort.setModel(new javax.swing.DefaultComboBoxModel(ports.toArray()));
        jcComPort.setFocusable(false);
        jcComPort.setSelectedIndex(jcComPort.getItemCount() - 1);
        jcComPort.setFocusable(false);
        jcComPort.setPreferredSize(new java.awt.Dimension(30, 20));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jsSpeed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createSequentialGroup()
                            .add(jbLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jbBack, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jbStop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jbForward, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jbRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jlRX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 368, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(93, 93, 93)
                                .add(jlProgresStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jcComPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(60, 60, 60)
                                .add(jbConnect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(57, 57, 57)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(37, 37, 37)
                                        .add(jbTakePic, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jlImage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(129, 129, 129)
                        .add(jrCIF)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jrQCIF)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jbConnect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jcComPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(33, 33, 33)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jrQCIF)
                            .add(jrCIF))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jbTakePic, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(4, 4, 4)
                        .add(jProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jlProgresStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jlImage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 244, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jlSpeed)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jsSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(44, 44, 44)
                        .add(jbForward, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jbLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jbStop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jbRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(33, 33, 33)
                        .add(jlRX)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(41, 41, 41))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-768)/2, (screenSize.height-536)/2, 768, 536);
    }// </editor-fold>//GEN-END:initComponents

    private void jbTakePicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTakePicActionPerformed

        try {
            serialPort.takePicture(jrCIF.isSelected() ? BMP.ImageType.CIF : BMP.ImageType.QCIF);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Could not send");
        }
}//GEN-LAST:event_jbTakePicActionPerformed

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed

        try {
            serialPort.move(ROBOT_MOVE_BACK, jsSpeed.getValue());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Could not send");
        }
}//GEN-LAST:event_jbBackActionPerformed

    private void jbLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLeftActionPerformed

        try {
            serialPort.move(ROBOT_MOVE_LEFT, jsSpeed.getValue());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Could not send");
        }
}//GEN-LAST:event_jbLeftActionPerformed

    private void jbStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStopActionPerformed

        try {
            serialPort.move(ROBOT_MOVE_STOP);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Could not send");
        }
}//GEN-LAST:event_jbStopActionPerformed

    private void jbForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbForwardActionPerformed

        try {
            serialPort.move(ROBOT_MOVE_FORWARD, jsSpeed.getValue());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Could not send");
        }
}//GEN-LAST:event_jbForwardActionPerformed

    private void jbRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRightActionPerformed

        try {
            serialPort.move(ROBOT_MOVE_RIGHT, jsSpeed.getValue());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Could not send");
        }
}//GEN-LAST:event_jbRightActionPerformed

    private void jbConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConnectActionPerformed
        if(serialPort == null){
            try {
                serialPort = new RobotController((String)jcComPort.getSelectedItem(), this);
                jbConnect.setIcon(new ImageIcon("disconnect.png"));
                jbConnect.setText("Disconnect");
            } catch (NoSuchPortException e) {
                JOptionPane.showMessageDialog(jbConnect, "Could not connect to COM " + portNumber + " !!!");
            }
        } else {
            serialPort.close();
            this.serialPort = null;
            jbConnect.setIcon(new ImageIcon("connect.png"));
            jbConnect.setText("Connect");
        }
        jcComPort.setEnabled(serialPort == null);
    }//GEN-LAST:event_jbConnectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBack;
    private javax.swing.JButton jbConnect;
    private javax.swing.JButton jbForward;
    private javax.swing.JButton jbLeft;
    private javax.swing.JButton jbRight;
    private javax.swing.JButton jbStop;
    private javax.swing.JButton jbTakePic;
    private javax.swing.JComboBox jcComPort;
    private javax.swing.JLabel jlImage;
    private javax.swing.JLabel jlProgresStatus;
    private javax.swing.JLabel jlRX;
    private javax.swing.JLabel jlSpeed;
    private javax.swing.JRadioButton jrCIF;
    private javax.swing.JRadioButton jrQCIF;
    private javax.swing.JSlider jsSpeed;
    private javax.swing.JTextArea jtaDisplay;
    // End of variables declaration//GEN-END:variables

    public void keyTyped(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void keyPressed(KeyEvent e) {
        
        String s = String.valueOf(KeyEvent.getKeyText(e.getKeyCode()));

        jtaDisplay.append(s + "\n");
                if(s.equalsIgnoreCase("UP")){
                    //jbForward.doClick();
                    try {
                        serialPort.move(ROBOT_MOVE_FORWARD, jsSpeed.getValue());
                    } catch (IOException ioe) {
                        JOptionPane.showMessageDialog(null, "Could not send");
                    }
                }
                if(s.equalsIgnoreCase("DOWN")){
                    //jbBack.doClick();
                    try {
                        serialPort.move(ROBOT_MOVE_BACK, jsSpeed.getValue());
                    } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(null, "Could not send");
                    }
                }
                if(s.equalsIgnoreCase("LEFT")){
                    //jbLeft.doClick();
                    try {
                        serialPort.move(ROBOT_MOVE_LEFT, jsSpeed.getValue());
                    } catch (IOException ioe) {
                        JOptionPane.showMessageDialog(null, "Could not send");
                    }
                }
                if(s.equalsIgnoreCase("RIGHT")){
                    //jbRight.doClick();
                    try {
                        serialPort.move(ROBOT_MOVE_RIGHT, jsSpeed.getValue());
                    } catch (IOException ioe) {
                        JOptionPane.showMessageDialog(null, "Could not send");
                    }
                }
    }

    public void keyReleased(KeyEvent e) {
        try {
                    serialPort.move(ROBOT_MOVE_STOP);
                } catch (IOException ex) {
                    Logger.getLogger(SpyUI.class.getName()).log(Level.SEVERE, null, ex);
                }
    }

    public void focusGained(FocusEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void focusLost(FocusEvent e) {
        this.requestFocusInWindow();
    }
}
